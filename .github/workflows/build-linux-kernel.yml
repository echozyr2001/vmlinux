name: Build Linux Kernel

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      kernel_version:
        description: "Kernel version to build (e.g., 6.1.102). Leave empty to use kernel_versions.txt"
        required: false
        default: ""

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build Docker image
        id: docker_build
        run: |
          docker build -t linux-kernel-builder -f Dockerfile .
          echo "image=linux-kernel-builder" >> "$GITHUB_OUTPUT"

      - name: Set up kernel version
        id: set_kernel_version
        run: |
          if [ -n "${{ github.event.inputs.kernel_version }}" ]; then
            echo "Using specified kernel version: ${{ github.event.inputs.kernel_version }}"
            echo "kernel_version=${{ github.event.inputs.kernel_version }}" >> "$GITHUB_OUTPUT"
          else
            KERNEL_VER=$(head -n 1 kernel_versions.txt)
            echo "Using kernel version from kernel_versions.txt: $KERNEL_VER"
            echo "kernel_version=$KERNEL_VER" >> "$GITHUB_OUTPUT"
          fi

      - name: Create artifacts directory
        run: mkdir -p ${{ github.workspace }}/artifacts

      - name: Run build script inside Docker container
        id: run_docker_build
        run: |
          # Step 1: Run the container as default root user to allow 'apt-get' etc. to succeed.
          docker run \
            --rm \
            -v ${{ github.workspace }}/artifacts:/workspace/builds \
            --workdir /workspace \
            ${{ steps.docker_build.outputs.image }}

          # Step 2: After the container exits, files in 'artifacts' are owned by root.
          # Use sudo on the HOST to change ownership back to the current 'runner' user.
          sudo chown -R $(id -u):$(id -g) ${{ github.workspace }}/artifacts

          # Step 3: Now that the runner user owns the files, subsequent steps will succeed.
          KERNEL_VER=${{ steps.set_kernel_version.outputs.kernel_version }}
          ARTIFACT_DIR="${{ github.workspace }}/artifacts"

          if [ ! -f "${ARTIFACT_DIR}/vmlinux-${KERNEL_VER}/vmlinux.bin" ]; then
            echo "Kernel build failed: vmlinux.bin not found in artifacts directory."
            exit 1
          fi

          # Rename the final artifact. This will now work.
          mv "${ARTIFACT_DIR}/vmlinux-${KERNEL_VER}/vmlinux.bin" "${ARTIFACT_DIR}/vmlinux-kernel-${KERNEL_VER}.bin"
          echo "build_success=true" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release and Upload Asset
        if: steps.run_docker_build.outputs.build_success == 'true'
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: "kernel-${{ steps.set_kernel_version.outputs.kernel_version }}"
          name: "Linux Kernel ${{ steps.set_kernel_version.outputs.kernel_version }}"
          body: |
            Linux kernel built for version ${{ steps.set_kernel_version.outputs.kernel_version }}.
            Built by GitHub Actions using Docker.
          draft: false
          prerelease: false
          files: |
            ${{ github.workspace }}/artifacts/vmlinux-kernel-*.bin
